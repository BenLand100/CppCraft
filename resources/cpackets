            case 0x00:{
                p_keep_alive *p = new p_keep_alive;
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x01:{
                p_login_request_cts *p = new p_login_request_cts;
                p.Version = io.r_int();
                p.Username = io.r_string16();
                p.MapSeed = io.r_long();
                p.Dimension = io.r_byte();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x01:{
                p_login_request_stc *p = new p_login_request_stc;
                p.EntityID = io.r_int();
                p.Unknown = io.r_string16();
                p.MapSeed = io.r_long();
                p.Dimension = io.r_byte();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x02:{
                p_handshake_cts *p = new p_handshake_cts;
                p.Username = io.r_string16();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x02:{
                p_handshake_stc *p = new p_handshake_stc;
                p.ConnectionHash = io.r_string16();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x03:{
                p_chat_message *p = new p_chat_message;
                p.Message = io.r_string16();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x04:{
                p_time_update *p = new p_time_update;
                p.Time = io.r_long();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x05:{
                p_entity_equipment *p = new p_entity_equipment;
                p.Entity ID = io.r_int();
                p.Slot = io.r_short();
                p.ItemID = io.r_short();
                p.Damage = io.r_short();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x06:{
                p_spawn_position *p = new p_spawn_position;
                p.X = io.r_int();
                p.Y = io.r_int();
                p.Z = io.r_int();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x07:{
                p_use_entity *p = new p_use_entity;
                p.UserEID = io.r_int();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x08:{
                p_update_health *p = new p_update_health;
                p.Health = io.r_short();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x09:{
                p_respawn *p = new p_respawn;
                p.World = io.r_byte();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x0A:{
                p_player *p = new p_player;
                p.OnGround = io.r_bool();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x0B:{
                p_player_position *p = new p_player_position;
                p.X = io.r_double();
                p.Y = io.r_double();
                p.Stance = io.r_double();
                p.Z = io.r_double();
                p.OnGround = io.r_bool();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x0C:{
                p_player_look *p = new p_player_look;
                p.Yaw = io.r_float();
                p.Pitch = io.r_float();
                p.OnGround = io.r_bool();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x0D:{
                p_player_position_and_look_cts *p = new p_player_position_and_look_cts;
                p.X = io.r_double();
                p.Y = io.r_double();
                p.Stance = io.r_double();
                p.Z = io.r_double();
                p.Yaw = io.r_float();
                p.Pitch = io.r_float();
                p.On Ground = io.r_bool();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x0D:{
                p_player_position_and_look_stc *p = new p_player_position_and_look_stc;
                p.X = io.r_double();
                p.Stance = io.r_double();
                p.Y = io.r_double();
                p.Z = io.r_double();
                p.Yaw = io.r_float();
                p.Pitch = io.r_float();
                p.OnGround = io.r_bool();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x0E:{
                p_player_digging *p = new p_player_digging;
                p.Status = io.r_byte();
                p.X = io.r_int();
                p.Y = io.r_byte();
                p.Z = io.r_int();
                p.Face = io.r_byte();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x0F:{
                p_player_block_placement! *p = new p_player_block_placement!;
                p.X = io.r_int();
                p.Y = io.r_byte();
                p.Z = io.r_int();
                p.Direction = io.r_byte();
                p.BlockID = io.r_short();
                p.Amount = io.r_byte();
                p.Damage = io.r_short();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x10:{
                p_holding_change *p = new p_holding_change;
                p.SlotID = io.r_short();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x11:{
                p_use_bed *p = new p_use_bed;
                p.EntityID = io.r_int();
                p.InBed = io.r_byte();
                p.X = io.r_int();
                p.Y = io.r_byte();
                p.Z = io.r_int();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x12:{
                p_animate *p = new p_animate;
                p.EntityID = io.r_int();
                p.Animate = io.r_byte();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x13:{
                p_act *p = new p_act;
                p.EntityID = io.r_int();
                p.Action = io.r_byte();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x14:{
                p_spawn_player *p = new p_spawn_player;
                p.EID = io.r_int();
                p.Name = io.r_string16();
                p.X = io.r_int();
                p.Y = io.r_int();
                p.Z = io.r_int();
                p.Yaw = io.r_byte();
                p.Pitch = io.r_byte();
                p.CurrentItem = io.r_short();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x15:{
                p_pickup_spawn *p = new p_pickup_spawn;
                p.EntityID = io.r_int();
                p.Item = io.r_short();
                p.Count = io.r_byte();
                p.Damage = io.r_short();
                p.X = io.r_int();
                p.Y = io.r_int();
                p.Z = io.r_int();
                p.Yaw = io.r_byte();
                p.Pitch = io.r_byte();
                p.Roll = io.r_byte();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x16:{
                p_collect_item *p = new p_collect_item;
                p.CollectedEID = io.r_int();
                p.CollectorEID = io.r_int();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x17:{
                p_addobject! *p = new p_addobject!;
                p.EntityID = io.r_int();
                p.Type = io.r_byte();
                p.X = io.r_int();
                p.Y = io.r_int();
                p.Z = io.r_int();
                p.Flag = io.r_int();
                p.Xmap = io.r_short();
                p.Ymap = io.r_short();
                p.Zmap = io.r_short();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x18:{
                p_spawn_mob *p = new p_spawn_mob;
                p.EntityID = io.r_int();
                p.Type = io.r_byte();
                p.X = io.r_int();
                p.Y = io.r_int();
                p.Z = io.r_int();
                p.Yaw = io.r_byte();
                p.Pitch = io.r_byte();
                p.Metadata = io.r_metadata();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x19:{
                p_painting *p = new p_painting;
                p.Entity ID = io.r_int();
                p.Title = io.r_String16();
                p.X = io.r_int();
                p.Y = io.r_int();
                p.Z = io.r_int();
                p.Direction = io.r_int();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x1B:{
                p_stance_update *p = new p_stance_update;
                p.A = io.r_float();
                p.B = io.r_float();
                p.C = io.r_float();
                p.D = io.r_float();
                p.E = io.r_boolean();
                p.F = io.r_boolean();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x1C:{
                p_entity_velocity *p = new p_entity_velocity;
                p.EntityID = io.r_int();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x1D:{
                p_destroy_entity *p = new p_destroy_entity;
                p.EntityID = io.r_int();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x1E:{
                p_entity *p = new p_entity;
                p.EntityID = io.r_int();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x1F:{
                p_entity_relative_move *p = new p_entity_relative_move;
                p.EntityID = io.r_int();
                p.dX = io.r_byte();
                p.dY = io.r_byte();
                p.dZ = io.r_byte();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x20:{
                p_entity_look *p = new p_entity_look;
                p.EntityID = io.r_int();
                p.Yaw = io.r_byte();
                p.Pitch = io.r_byte();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x21:{
                p_entity_look_and_relative_move *p = new p_entity_look_and_relative_move;
                p.EntityID = io.r_int();
                p.dX = io.r_byte();
                p.dY = io.r_byte();
                p.dZ = io.r_byte();
                p.Yaw = io.r_byte();
                p.Pitch = io.r_byte();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x22:{
                p_entity_teleport *p = new p_entity_teleport;
                p.EntityID = io.r_int();
                p.X = io.r_int();
                p.Y = io.r_int();
                p.Z = io.r_int();
                p.Yaw = io.r_byte();
                p.Pitch = io.r_byte();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x26:{
                p_entity_status *p = new p_entity_status;
                p.EntityID = io.r_Int();
                p.Status = io.r_Byte();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x27:{
                p_attach_entity *p = new p_attach_entity;
                p.EntityID = io.r_int();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x28:{
                p_entity_metadata *p = new p_entity_metadata;
                p.EntityID = io.r_int();
                p.Metadata = io.r_metadata();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x32:{
                p_prechunk *p = new p_prechunk;
                p.X = io.r_int();
                p.Z = io.r_int();
                p.Mode = io.r_bool();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x33:{
                p_map_chunk *p = new p_map_chunk;
                p.X = io.r_int();
                p.Y = io.r_short();
                p.Z = io.r_int();
                p.SizeX = io.r_byte();
                p.SizeY = io.r_byte();
                p.SizeZ = io.r_byte();
                p.CompressedSize = io.r_int();
                p.CompressedData = io.r_byte array();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x34:{
                p_multi_block_change *p = new p_multi_block_change;
                p.ChunkX = io.r_int();
                p.ChunkZ = io.r_int();
                p.ArraySize = io.r_short();
                p.CoordinateArray = io.r_short array();
                p.TypeArray = io.r_byte array();
                p.MetadataArray = io.r_byte array();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x35:{
                p_block_change *p = new p_block_change;
                p.X = io.r_int();
                p.Y = io.r_byte();
                p.Z = io.r_int();
                p.Type = io.r_byte();
                p.Metadata = io.r_byte();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x36:{
                p_block_action *p = new p_block_action;
                p.X = io.r_int();
                p.Y = io.r_short();
                p.Z = io.r_int();
                p.DataA  = io.r_byte();
                p.DataB = io.r_byte();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x3C:{
                p_explosion *p = new p_explosion;
                p.X = io.r_double();
                p.Y = io.r_double();
                p.Z = io.r_double();
                p.Unknown = io.r_float();
                p.RecordCount = io.r_int();
                p.Records = io.r_(byte, byte, byte) × count();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x3D:{
                p_sound_effect *p = new p_sound_effect;
                p.EffectID = io.r_int();
                p.X = io.r_int();
                p.Y = io.r_byte();
                p.Z = io.r_int();
                p.SoundData = io.r_int();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x46:{
                p_new_state *p = new p_new_state;
                p.Reason = io.r_byte();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x47:{
                p_thunderbolt *p = new p_thunderbolt;
                p.EntityID = io.r_int();
                p.Unknown = io.r_boolean();
                p.X = io.r_int();
                p.Y = io.r_int();
                p.Z = io.r_int();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x64:{
                p_open_window *p = new p_open_window;
                p.WindowId = io.r_byte();
                p.InventoryType = io.r_byte();
                p.WindowTitle = io.r_string8();
                p.NumberOfSlots = io.r_byte();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x65:{
                p_close_window *p = new p_close_window;
                p.WindowID = io.r_byte();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x66:{
                p_window_click *p = new p_window_click;
                p.WindowID = io.r_byte();
                p.Slot = io.r_short();
                p.RightClick = io.r_byte();
                p.ActionNumber = io.r_short();
                p.Shift = io.r_bool();
                p.ItemID = io.r_short();
                p.ItemCount = io.r_byte();
                p.ItemUses = io.r_short();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x67:{
                p_set_slot *p = new p_set_slot;
                p.WindowID = io.r_byte();
                p.Slot = io.r_short();
                p.ItemID = io.r_short();
                p.ItemCount = io.r_byte();
                p.ItemUses = io.r_short();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x68:{
                p_window_items! *p = new p_window_items!;
                p.WindowID = io.r_byte();
                p.Count = io.r_short();
                p.Payload = io.r_…();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x69:{
                p_update_progress_bar *p = new p_update_progress_bar;
                p.WindowID = io.r_byte();
                p.ProgressBar = io.r_short();
                p.Value = io.r_short();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x6A:{
                p_transaction *p = new p_transaction;
                p.WindowID = io.r_byte();
                p.ActionNumber = io.r_short();
                p.Accepted = io.r_boolean();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x82:{
                p_update_sign *p = new p_update_sign;
                p.X = io.r_int();
                p.Y = io.r_short();
                p.Z = io.r_int();
                p.Text1 = io.r_string16();
                p.Text2 = io.r_string16();
                p.Text3 = io.r_string16();
                p.Text4 = io.r_string16();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0x83:{
                p_map_data *p = new p_map_data;
                p.UnknownA = io.r_short();
                p.UnknownB = io.r_short();
                p.TextLength = io.r_unsigned byte();
                p.Text = io.r_byte array();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0xC8:{
                p_increment_statistic *p = new p_increment_statistic;
                p.StatisticID = io.r_int();
                p.Amount = io.r_byte();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;
            case 0xFF:{
                p_kick *p = new p_kick;
                p.Message = io.r_string16();
                if (!io.working) break;
                client->packet((p_generic*)p);
            } break;

