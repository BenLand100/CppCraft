#define send_keep_alive() { /
        p_keep_alive p; /
        p.id = 0x00; /
        write_packet((p_generic*)&p); /
    }
#define send_login_request_cts(_Version,_Username,_MapSeed,_Dimension) { /
        p_login_request_cts p; /
        p.id = 0x01; /
        p.Version = (_Version); /
        p.Username = (_Username); /
        p.MapSeed = (_MapSeed); /
        p.Dimension = (_Dimension); /
        write_packet((p_generic*)&p); /
    }
#define send_login_request_stc(_EntityID,_Unknown,_MapSeed,_Dimension) { /
        p_login_request_stc p; /
        p.id = 0x01; /
        p.EntityID = (_EntityID); /
        p.Unknown = (_Unknown); /
        p.MapSeed = (_MapSeed); /
        p.Dimension = (_Dimension); /
        write_packet((p_generic*)&p); /
    }
#define send_handshake_cts(_Username) { /
        p_handshake_cts p; /
        p.id = 0x02; /
        p.Username = (_Username); /
        write_packet((p_generic*)&p); /
    }
#define send_handshake_stc(_ConnectionHash) { /
        p_handshake_stc p; /
        p.id = 0x02; /
        p.ConnectionHash = (_ConnectionHash); /
        write_packet((p_generic*)&p); /
    }
#define send_chat_message(_Message) { /
        p_chat_message p; /
        p.id = 0x03; /
        p.Message = (_Message); /
        write_packet((p_generic*)&p); /
    }
#define send_time_update(_Time) { /
        p_time_update p; /
        p.id = 0x04; /
        p.Time = (_Time); /
        write_packet((p_generic*)&p); /
    }
#define send_entity_equipment(_Entity ID,_Slot,_ItemID,_Damage) { /
        p_entity_equipment p; /
        p.id = 0x05; /
        p.Entity ID = (_Entity ID); /
        p.Slot = (_Slot); /
        p.ItemID = (_ItemID); /
        p.Damage = (_Damage); /
        write_packet((p_generic*)&p); /
    }
#define send_spawn_position(_X,_Y,_Z) { /
        p_spawn_position p; /
        p.id = 0x06; /
        p.X = (_X); /
        p.Y = (_Y); /
        p.Z = (_Z); /
        write_packet((p_generic*)&p); /
    }
#define send_use_entity(_UserEID) { /
        p_use_entity p; /
        p.id = 0x07; /
        p.UserEID = (_UserEID); /
        write_packet((p_generic*)&p); /
    }
#define send_update_health(_Health) { /
        p_update_health p; /
        p.id = 0x08; /
        p.Health = (_Health); /
        write_packet((p_generic*)&p); /
    }
#define send_respawn(_World) { /
        p_respawn p; /
        p.id = 0x09; /
        p.World = (_World); /
        write_packet((p_generic*)&p); /
    }
#define send_player(_OnGround) { /
        p_player p; /
        p.id = 0x0A; /
        p.OnGround = (_OnGround); /
        write_packet((p_generic*)&p); /
    }
#define send_player_position(_X,_Y,_Stance,_Z,_OnGround) { /
        p_player_position p; /
        p.id = 0x0B; /
        p.X = (_X); /
        p.Y = (_Y); /
        p.Stance = (_Stance); /
        p.Z = (_Z); /
        p.OnGround = (_OnGround); /
        write_packet((p_generic*)&p); /
    }
#define send_player_look(_Yaw,_Pitch,_OnGround) { /
        p_player_look p; /
        p.id = 0x0C; /
        p.Yaw = (_Yaw); /
        p.Pitch = (_Pitch); /
        p.OnGround = (_OnGround); /
        write_packet((p_generic*)&p); /
    }
#define send_player_position_and_look_cts(_X,_Y,_Stance,_Z,_Yaw,_Pitch,_On Ground) { /
        p_player_position_and_look_cts p; /
        p.id = 0x0D; /
        p.X = (_X); /
        p.Y = (_Y); /
        p.Stance = (_Stance); /
        p.Z = (_Z); /
        p.Yaw = (_Yaw); /
        p.Pitch = (_Pitch); /
        p.On Ground = (_On Ground); /
        write_packet((p_generic*)&p); /
    }
#define send_player_position_and_look_stc(_X,_Stance,_Y,_Z,_Yaw,_Pitch,_OnGround) { /
        p_player_position_and_look_stc p; /
        p.id = 0x0D; /
        p.X = (_X); /
        p.Stance = (_Stance); /
        p.Y = (_Y); /
        p.Z = (_Z); /
        p.Yaw = (_Yaw); /
        p.Pitch = (_Pitch); /
        p.OnGround = (_OnGround); /
        write_packet((p_generic*)&p); /
    }
#define send_player_digging(_Status,_X,_Y,_Z,_Face) { /
        p_player_digging p; /
        p.id = 0x0E; /
        p.Status = (_Status); /
        p.X = (_X); /
        p.Y = (_Y); /
        p.Z = (_Z); /
        p.Face = (_Face); /
        write_packet((p_generic*)&p); /
    }
#define send_player_block_placement!(_X,_Y,_Z,_Direction,_BlockID,_Amount,_Damage) { /
        p_player_block_placement! p; /
        p.id = 0x0F; /
        p.X = (_X); /
        p.Y = (_Y); /
        p.Z = (_Z); /
        p.Direction = (_Direction); /
        p.BlockID = (_BlockID); /
        p.Amount = (_Amount); /
        p.Damage = (_Damage); /
        write_packet((p_generic*)&p); /
    }
#define send_holding_change(_SlotID) { /
        p_holding_change p; /
        p.id = 0x10; /
        p.SlotID = (_SlotID); /
        write_packet((p_generic*)&p); /
    }
#define send_use_bed(_EntityID,_InBed,_X,_Y,_Z) { /
        p_use_bed p; /
        p.id = 0x11; /
        p.EntityID = (_EntityID); /
        p.InBed = (_InBed); /
        p.X = (_X); /
        p.Y = (_Y); /
        p.Z = (_Z); /
        write_packet((p_generic*)&p); /
    }
#define send_animate(_EntityID,_Animate) { /
        p_animate p; /
        p.id = 0x12; /
        p.EntityID = (_EntityID); /
        p.Animate = (_Animate); /
        write_packet((p_generic*)&p); /
    }
#define send_act(_EntityID,_Action) { /
        p_act p; /
        p.id = 0x13; /
        p.EntityID = (_EntityID); /
        p.Action = (_Action); /
        write_packet((p_generic*)&p); /
    }
#define send_spawn_player(_EID,_Name,_X,_Y,_Z,_Yaw,_Pitch,_CurrentItem) { /
        p_spawn_player p; /
        p.id = 0x14; /
        p.EID = (_EID); /
        p.Name = (_Name); /
        p.X = (_X); /
        p.Y = (_Y); /
        p.Z = (_Z); /
        p.Yaw = (_Yaw); /
        p.Pitch = (_Pitch); /
        p.CurrentItem = (_CurrentItem); /
        write_packet((p_generic*)&p); /
    }
#define send_pickup_spawn(_EntityID,_Item,_Count,_Damage,_X,_Y,_Z,_Yaw,_Pitch,_Roll) { /
        p_pickup_spawn p; /
        p.id = 0x15; /
        p.EntityID = (_EntityID); /
        p.Item = (_Item); /
        p.Count = (_Count); /
        p.Damage = (_Damage); /
        p.X = (_X); /
        p.Y = (_Y); /
        p.Z = (_Z); /
        p.Yaw = (_Yaw); /
        p.Pitch = (_Pitch); /
        p.Roll = (_Roll); /
        write_packet((p_generic*)&p); /
    }
#define send_collect_item(_CollectedEID,_CollectorEID) { /
        p_collect_item p; /
        p.id = 0x16; /
        p.CollectedEID = (_CollectedEID); /
        p.CollectorEID = (_CollectorEID); /
        write_packet((p_generic*)&p); /
    }
#define send_addobject!(_EntityID,_Type,_X,_Y,_Z,_Flag,_Xmap,_Ymap,_Zmap) { /
        p_addobject! p; /
        p.id = 0x17; /
        p.EntityID = (_EntityID); /
        p.Type = (_Type); /
        p.X = (_X); /
        p.Y = (_Y); /
        p.Z = (_Z); /
        p.Flag = (_Flag); /
        p.Xmap = (_Xmap); /
        p.Ymap = (_Ymap); /
        p.Zmap = (_Zmap); /
        write_packet((p_generic*)&p); /
    }
#define send_spawn_mob(_EntityID,_Type,_X,_Y,_Z,_Yaw,_Pitch,_Metadata) { /
        p_spawn_mob p; /
        p.id = 0x18; /
        p.EntityID = (_EntityID); /
        p.Type = (_Type); /
        p.X = (_X); /
        p.Y = (_Y); /
        p.Z = (_Z); /
        p.Yaw = (_Yaw); /
        p.Pitch = (_Pitch); /
        p.Metadata = (_Metadata); /
        write_packet((p_generic*)&p); /
    }
#define send_painting(_Entity ID,_Title,_X,_Y,_Z,_Direction) { /
        p_painting p; /
        p.id = 0x19; /
        p.Entity ID = (_Entity ID); /
        p.Title = (_Title); /
        p.X = (_X); /
        p.Y = (_Y); /
        p.Z = (_Z); /
        p.Direction = (_Direction); /
        write_packet((p_generic*)&p); /
    }
#define send_stance_update(_A,_B,_C,_D,_E,_F) { /
        p_stance_update p; /
        p.id = 0x1B; /
        p.A = (_A); /
        p.B = (_B); /
        p.C = (_C); /
        p.D = (_D); /
        p.E = (_E); /
        p.F = (_F); /
        write_packet((p_generic*)&p); /
    }
#define send_entity_velocity(_EntityID) { /
        p_entity_velocity p; /
        p.id = 0x1C; /
        p.EntityID = (_EntityID); /
        write_packet((p_generic*)&p); /
    }
#define send_destroy_entity(_EntityID) { /
        p_destroy_entity p; /
        p.id = 0x1D; /
        p.EntityID = (_EntityID); /
        write_packet((p_generic*)&p); /
    }
#define send_entity(_EntityID) { /
        p_entity p; /
        p.id = 0x1E; /
        p.EntityID = (_EntityID); /
        write_packet((p_generic*)&p); /
    }
#define send_entity_relative_move(_EntityID,_dX,_dY,_dZ) { /
        p_entity_relative_move p; /
        p.id = 0x1F; /
        p.EntityID = (_EntityID); /
        p.dX = (_dX); /
        p.dY = (_dY); /
        p.dZ = (_dZ); /
        write_packet((p_generic*)&p); /
    }
#define send_entity_look(_EntityID,_Yaw,_Pitch) { /
        p_entity_look p; /
        p.id = 0x20; /
        p.EntityID = (_EntityID); /
        p.Yaw = (_Yaw); /
        p.Pitch = (_Pitch); /
        write_packet((p_generic*)&p); /
    }
#define send_entity_look_and_relative_move(_EntityID,_dX,_dY,_dZ,_Yaw,_Pitch) { /
        p_entity_look_and_relative_move p; /
        p.id = 0x21; /
        p.EntityID = (_EntityID); /
        p.dX = (_dX); /
        p.dY = (_dY); /
        p.dZ = (_dZ); /
        p.Yaw = (_Yaw); /
        p.Pitch = (_Pitch); /
        write_packet((p_generic*)&p); /
    }
#define send_entity_teleport(_EntityID,_X,_Y,_Z,_Yaw,_Pitch) { /
        p_entity_teleport p; /
        p.id = 0x22; /
        p.EntityID = (_EntityID); /
        p.X = (_X); /
        p.Y = (_Y); /
        p.Z = (_Z); /
        p.Yaw = (_Yaw); /
        p.Pitch = (_Pitch); /
        write_packet((p_generic*)&p); /
    }
#define send_entity_status(_EntityID,_Status) { /
        p_entity_status p; /
        p.id = 0x26; /
        p.EntityID = (_EntityID); /
        p.Status = (_Status); /
        write_packet((p_generic*)&p); /
    }
#define send_attach_entity(_EntityID) { /
        p_attach_entity p; /
        p.id = 0x27; /
        p.EntityID = (_EntityID); /
        write_packet((p_generic*)&p); /
    }
#define send_entity_metadata(_EntityID,_Metadata) { /
        p_entity_metadata p; /
        p.id = 0x28; /
        p.EntityID = (_EntityID); /
        p.Metadata = (_Metadata); /
        write_packet((p_generic*)&p); /
    }
#define send_prechunk(_X,_Z,_Mode) { /
        p_prechunk p; /
        p.id = 0x32; /
        p.X = (_X); /
        p.Z = (_Z); /
        p.Mode = (_Mode); /
        write_packet((p_generic*)&p); /
    }
#define send_map_chunk(_X,_Y,_Z,_SizeX,_SizeY,_SizeZ,_CompressedSize,_CompressedData) { /
        p_map_chunk p; /
        p.id = 0x33; /
        p.X = (_X); /
        p.Y = (_Y); /
        p.Z = (_Z); /
        p.SizeX = (_SizeX); /
        p.SizeY = (_SizeY); /
        p.SizeZ = (_SizeZ); /
        p.CompressedSize = (_CompressedSize); /
        p.CompressedData = (_CompressedData); /
        write_packet((p_generic*)&p); /
    }
#define send_multi_block_change(_ChunkX,_ChunkZ,_ArraySize,_CoordinateArray,_TypeArray,_MetadataArray) { /
        p_multi_block_change p; /
        p.id = 0x34; /
        p.ChunkX = (_ChunkX); /
        p.ChunkZ = (_ChunkZ); /
        p.ArraySize = (_ArraySize); /
        p.CoordinateArray = (_CoordinateArray); /
        p.TypeArray = (_TypeArray); /
        p.MetadataArray = (_MetadataArray); /
        write_packet((p_generic*)&p); /
    }
#define send_block_change(_X,_Y,_Z,_Type,_Metadata) { /
        p_block_change p; /
        p.id = 0x35; /
        p.X = (_X); /
        p.Y = (_Y); /
        p.Z = (_Z); /
        p.Type = (_Type); /
        p.Metadata = (_Metadata); /
        write_packet((p_generic*)&p); /
    }
#define send_block_action(_X,_Y,_Z,_DataA ,_DataB) { /
        p_block_action p; /
        p.id = 0x36; /
        p.X = (_X); /
        p.Y = (_Y); /
        p.Z = (_Z); /
        p.DataA  = (_DataA ); /
        p.DataB = (_DataB); /
        write_packet((p_generic*)&p); /
    }
#define send_explosion(_X,_Y,_Z,_Unknown,_RecordCount,_Records) { /
        p_explosion p; /
        p.id = 0x3C; /
        p.X = (_X); /
        p.Y = (_Y); /
        p.Z = (_Z); /
        p.Unknown = (_Unknown); /
        p.RecordCount = (_RecordCount); /
        p.Records = (_Records); /
        write_packet((p_generic*)&p); /
    }
#define send_sound_effect(_EffectID,_X,_Y,_Z,_SoundData) { /
        p_sound_effect p; /
        p.id = 0x3D; /
        p.EffectID = (_EffectID); /
        p.X = (_X); /
        p.Y = (_Y); /
        p.Z = (_Z); /
        p.SoundData = (_SoundData); /
        write_packet((p_generic*)&p); /
    }
#define send_new_state(_Reason) { /
        p_new_state p; /
        p.id = 0x46; /
        p.Reason = (_Reason); /
        write_packet((p_generic*)&p); /
    }
#define send_thunderbolt(_EntityID,_Unknown,_X,_Y,_Z) { /
        p_thunderbolt p; /
        p.id = 0x47; /
        p.EntityID = (_EntityID); /
        p.Unknown = (_Unknown); /
        p.X = (_X); /
        p.Y = (_Y); /
        p.Z = (_Z); /
        write_packet((p_generic*)&p); /
    }
#define send_open_window(_WindowId,_InventoryType,_WindowTitle,_NumberOfSlots) { /
        p_open_window p; /
        p.id = 0x64; /
        p.WindowId = (_WindowId); /
        p.InventoryType = (_InventoryType); /
        p.WindowTitle = (_WindowTitle); /
        p.NumberOfSlots = (_NumberOfSlots); /
        write_packet((p_generic*)&p); /
    }
#define send_close_window(_WindowID) { /
        p_close_window p; /
        p.id = 0x65; /
        p.WindowID = (_WindowID); /
        write_packet((p_generic*)&p); /
    }
#define send_window_click(_WindowID,_Slot,_RightClick,_ActionNumber,_Shift,_ItemID,_ItemCount,_ItemUses) { /
        p_window_click p; /
        p.id = 0x66; /
        p.WindowID = (_WindowID); /
        p.Slot = (_Slot); /
        p.RightClick = (_RightClick); /
        p.ActionNumber = (_ActionNumber); /
        p.Shift = (_Shift); /
        p.ItemID = (_ItemID); /
        p.ItemCount = (_ItemCount); /
        p.ItemUses = (_ItemUses); /
        write_packet((p_generic*)&p); /
    }
#define send_set_slot(_WindowID,_Slot,_ItemID,_ItemCount,_ItemUses) { /
        p_set_slot p; /
        p.id = 0x67; /
        p.WindowID = (_WindowID); /
        p.Slot = (_Slot); /
        p.ItemID = (_ItemID); /
        p.ItemCount = (_ItemCount); /
        p.ItemUses = (_ItemUses); /
        write_packet((p_generic*)&p); /
    }
#define send_window_items!(_WindowID,_Count,_Payload) { /
        p_window_items! p; /
        p.id = 0x68; /
        p.WindowID = (_WindowID); /
        p.Count = (_Count); /
        p.Payload = (_Payload); /
        write_packet((p_generic*)&p); /
    }
#define send_update_progress_bar(_WindowID,_ProgressBar,_Value) { /
        p_update_progress_bar p; /
        p.id = 0x69; /
        p.WindowID = (_WindowID); /
        p.ProgressBar = (_ProgressBar); /
        p.Value = (_Value); /
        write_packet((p_generic*)&p); /
    }
#define send_transaction(_WindowID,_ActionNumber,_Accepted) { /
        p_transaction p; /
        p.id = 0x6A; /
        p.WindowID = (_WindowID); /
        p.ActionNumber = (_ActionNumber); /
        p.Accepted = (_Accepted); /
        write_packet((p_generic*)&p); /
    }
#define send_update_sign(_X,_Y,_Z,_Text1,_Text2,_Text3,_Text4) { /
        p_update_sign p; /
        p.id = 0x82; /
        p.X = (_X); /
        p.Y = (_Y); /
        p.Z = (_Z); /
        p.Text1 = (_Text1); /
        p.Text2 = (_Text2); /
        p.Text3 = (_Text3); /
        p.Text4 = (_Text4); /
        write_packet((p_generic*)&p); /
    }
#define send_map_data(_UnknownA,_UnknownB,_TextLength,_Text) { /
        p_map_data p; /
        p.id = 0x83; /
        p.UnknownA = (_UnknownA); /
        p.UnknownB = (_UnknownB); /
        p.TextLength = (_TextLength); /
        p.Text = (_Text); /
        write_packet((p_generic*)&p); /
    }
#define send_increment_statistic(_StatisticID,_Amount) { /
        p_increment_statistic p; /
        p.id = 0xC8; /
        p.StatisticID = (_StatisticID); /
        p.Amount = (_Amount); /
        write_packet((p_generic*)&p); /
    }
#define send_kick(_Message) { /
        p_kick p; /
        p.id = 0xFF; /
        p.Message = (_Message); /
        write_packet((p_generic*)&p); /
    }

